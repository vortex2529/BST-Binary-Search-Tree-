// Brute Force



void solve(Node* root,vector<int> &in){
    if(!root) return;
    solve(root->left,in);
    in.push_back(root->data);
    solve(root->right,in);
}
float findMedian(struct Node *root) {
    vector<int> in;
    solve(root,in);
    
    if(in.size() & 1){
        return in[in.size()/2];
    }
    else{
        float median = (in[in.size()/2]+ in[(in.size()/2)-1])/2.0;
        return median;
    }
    
}

// Optimal 

int findNodeCount(Node* root){
    int count = 0;
    Node* curr = root;
    while(curr){
        if(!curr->left){
            count++;
            curr = curr->right;
        }
        else{
            Node* pred = curr->left;
            while(pred->right && pred->right != curr){
                pred = pred->right;
            }
            
            if(!pred->right){
                pred->right = curr;
                curr = curr->left;
            }
            else{
                pred->right = 0;
                count++;
                curr = curr->right;
            }
        }
    }
    return count;
}

float findMedian_helper(Node* root,int n){
    int i = 0;
    int odd1 = (n+1)/2 , odd1Val = -1;
    int even1 = n/2 , even1Val = -1;
    int even2 = n/2 + 1, even2Val = -1;
    Node* curr = root;
    while(curr){
        if(!curr->left){
            i++;
            if(i == odd1) odd1Val = curr->data;
            if(i == even1) even1Val = curr->data;
            if(i == even2) even2Val = curr->data;
            curr = curr->right;
        }
        else{
            Node* pred = curr->left;
            while(pred->right && pred->right != curr){
                pred = pred->right;
            }
            
            if(!pred->right){
                pred->right = curr;
                curr = curr->left;
            }
            else{
                pred->right = 0;
                i++;
                if(i == odd1) odd1Val = curr->data;
                if(i == even1) even1Val = curr->data;
                if(i == even2) even2Val = curr->data;
                curr = curr->right;
            }
        }
    }
    
    return n&1? odd1Val:(even1Val + even2Val)/2.0;
}
float findMedian(struct Node *root) {
    int n = findNodeCount(root);
    
    return findMedian_helper(root,n);
    
}
