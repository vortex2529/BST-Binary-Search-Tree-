#include <iostream>
#include <queue>
using namespace std;

class Node{
    public:
    int data;
    Node* left;
    Node* right;

    Node(int _data):data(_data),left(NULL),right(NULL){}
};



Node* insertIntoBST(Node* root,int data){
    if(!root){
      // if first node
      root = new Node(data);
      return root;
    }

      // if not the first node
    if(root->data > data){
      // insert into left
      root->left = insertIntoBST(root->left,data);
    }
    else{
      // insert into right
      root->right = insertIntoBST(root->right,data);
    }

    return root;
}
void takeInput(Node* &root){
    int data;
    cin>>data;
    while(data != -1){
      root = insertIntoBST(root,data);
      cin>>data;
    }
}
void LevelOrderTraversal_PrintLevelWise(Node* root){
  queue<Node*> q;

  q.push(root);
  q.push(NULL);

  while(!q.empty()){

    Node* temp = q.front();
    q.pop();
    if(temp == NULL){
      cout<<endl;
      if(!q.empty()){
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left){
        q.push(temp->left);
      }
      if(temp->right){
        q.push(temp->right);
      }
    } 
  }
}

void printLL(Node* head){
  cout<<"Printing BST TO sorted LL :"<<endl;
  Node* curr = head;
  while(curr){
    cout<<curr->data<<" ";
    curr = curr->right;
  }
  cout<<endl;
}

void in(Node* root,Node* &prev){
  if(!root) return;

  in(root->left,prev);
  prev->left = 0;
  prev->right = root;
  prev = root;
  in(root->right,prev);
}
Node* flatten(Node* root){
  Node* dummy = new Node(-1);
  Node* prev = dummy;

  in(root,prev);
  prev->left = prev->right = 0;
  root = dummy->right;
  return root;
}

int main() {
  Node* root = 0;
  takeInput(root);

  LevelOrderTraversal_PrintLevelWise(root);

  root = flatten(root);

  printLL(root);

}
